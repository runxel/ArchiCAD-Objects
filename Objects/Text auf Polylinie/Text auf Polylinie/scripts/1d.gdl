! ********* MASTER SCRIPT ********* !! ********************************* !! with Polyline code by Esteban Ramos! === ERROR CHECKING ===EPS = 0.0001! ======================! === SECOND POINT MUST EXIST ===IF points=2 AND (ABS(x[2]-x[1])<EPS AND ABS(y[2]-y[1])<EPS) THEN	x[2] = constraint	y[2] = 0ENDIF! ===FOR ADDING POINTS===============================================IF GLOB_MODPAR_NAME = "insertX" OR GLOB_MODPAR_NAME = "insertY" THEN	FOR i=1 to points		IF ABS(insertX[i]-insertXPrev[i])>EPS OR ABS(insertY[i]-insertYPrev[i])>EPS THEN			insertIndex = i			newX = insertX[i]			newY = insertY[i]			newZ = insertZ[i]		ENDIF	NEXT i	IF insertIndex > 0 THEN		points = points+1		FOR i=points TO insertIndex+2 STEP -1			x[i] = x[i-1]			y[i] = y[i-1]			z[i] = z[i-1]		NEXT i		x[insertIndex+1] = newX		y[insertIndex+1] = newY		z[insertIndex+1] = newZ	ENDIFENDIF! ===================================================================! === FOR REMOVING POINTS ===========================================remainingPoints = 1FOR i=1 TO points-1	hypotenuse = sqr((x[i+1]-x[i])^2 +(y[i+1]-y[i])^2)	IF hypotenuse > EPS THEN		remainingPoints = remainingPoints+1		PUT x[i+1], y[i+1], z[i+1]	ENDIFNEXT iFOR i=2 TO remainingPoints	x[i] = GET(1)	y[i] = GET(1)	z[i] = GET(1)NEXT ipoints = remainingPoints! ==================================================================! === MAKE ROOM FOR NEW VALUES IN ARRAYS ===x[points+1] = x[points]y[points+1] = y[points]z[points+1] = z[points]insertX[points+1] 		= 0insertY[points+1] 		= 0insertZ[points+1] 		= 0insertXPrev[points+1] 	= 0insertYPrev[points+1] 	= 0insertZPrev[points+1] 	= 0hypotenuse2D[points+1]  = 0hypotenuse3D[points+1]  = 0alpha2D[points+1] 		= 0alpha3D[points+1] 		= 0! === GIVE PARAMETER ARRAYS THEIR CALCULATED VALUES ===PARAMETERS a = a, !<--- this just to keep the parameter arrays in next lines.			points = points,			x = x,			y = y,			z = z,			insertX = insertX,			insertY = insertY,			insertZ = insertZ,			insertXPrev = insertX,			insertYPrev = insertY,			insertZPrev = insertZ,			hypotenuse2D = hypotenuse2D,			hypotenuse3D = hypotenuse3D,			alpha2D = alpha2D,			alpha3D = alpha3D! === MOVABLE BASE HOTSPOT ===IF NOT(movableBaseHotspot) THEN	x[1] = 0	y[1] = 0	z[1] = 0ENDIF! ===================================================================! === CALCULATIONS ===! ===================================================================segments = points-1fullLength   = 0fullLength3D = 0! === HYPOTENUSES AND ANGLES ===FOR i=1 TO segments	hypotenuse2D[i] = sqr((x[i+1]-x[i])^2 +(y[i+1]-y[i])^2)	hypotenuse3D[i] = sqr(hypotenuse2D[i]^2 + (z[i+1]-z[i])^2)		beta = ((x[i+1]-x[i])/hypotenuse2D[i])	IF beta > 1 THEN beta = 1	IF beta < -1 THEN beta = -1		alpha2D[i] = ACS (beta)	IF y[i+1]<y[i] THEN alpha2D[i] = -alpha2D[i]	angle3D = ACS (hypotenuse2D[i]/hypotenuse3D[i])	alpha3D[i] = angle3D	IF z[i+1]<z[i] THEN alpha3D[i] = -angle3D!!!	insertX[i] = x[i]+(x[i+1]-x[i])/2!!!	insertY[i] = y[i]+(y[i+1]-y[i])/2!!!	hotspot2 insertX[i],insertY[i]	fullLength   = fullLength+hypotenuse2D[i]	fullLength3D = fullLength3D+hypotenuse3D[i]NEXT iPARAMETERS fullLength   = fullLengthPARAMETERS fullLength3D = fullLength3D! === SECOND POINT CONSTRAINT =====IF points=2 AND hypotenuse2D[1]<=constraint AND useConstraint THEN	x[2] = x[1]+constraint*COS(alpha2D[1])	y[2] = y[1]+constraint*SIN(alpha2D[1])	IF GLOB_CONTEXT>20 AND GLOB_CONTEXT<30 THEN		CIRCLE2 x[1],y[1], constraint	ENDIFENDIF!**********************************************************!                END OF MASTER SCRIPT!**********************************************************