!--- Master script ---!!- For a mathematical explanation see http://jwilson.coe.uga.edu/EMAT6680Su06/Swanagan/Assignment7/BSAssignment7.html -!!- uses the "BasicGeometry" macro -!dict BasicGeometry  BasicGeometry.DIRECTION_POINTS_3D = 1  BasicGeometry.INTERSECT_LINE_LINE_2D = 4  BasicGeometry.INTERSECT_CIRCLE_LINE_2D = 5  BasicGeometry.INTERSECT_SEGMENT_LINE_2D = 6  BasicGeometry.INSERT_POINT_TO_SEGMENT_2D = 8eps = 0.0001!------------------------------------------------------------------------------!dict bigger_circle, smaller_circle, tpt! Determine the bigger circle firstbigger_circle.radius = max(radius1, radius2)if abs(bigger_circle.radius - radius1) < eps then	bigger_circle.id = 1	bigger_circle.center.x = x1	bigger_circle.center.y = y1	smaller_circle.radius = radius2	smaller_circle.center.x = x2	smaller_circle.center.y = y2else	bigger_circle.id = 2	bigger_circle.center.x = x2	bigger_circle.center.y = y2	smaller_circle.radius = radius1	smaller_circle.center.x = x1	smaller_circle.center.y = y1endif! Set the coordinates of the point where the tangent circle will meet the bigger circletpt.center.x = bigger_circle.radius * cos(tangent_point)tpt.center.y = bigger_circle.radius * sin(tangent_point)tpt.radius = smaller_circle.radiusif bigger_circle.id = 1 then	tpt.center.x = tpt.center.x + x1	tpt.center.y = tpt.center.y + y1else	tpt.center.x = tpt.center.x + x2	tpt.center.y = tpt.center.y + y2endif! Get the intersection of the Line with Circle! (it's easier to just get the distance on the line right)dict _segment, _inserted  _segment.begPoint = tpt.center  _segment.endPoint = bigger_circle.center  _segment.type = 0 	! straightcall "BasicGeometry" \	parameters	iFunction = BasicGeometry.INSERT_POINT_TO_SEGMENT_2D,				segment = _segment,				insertionDist = smaller_circle.radius,	returned_parameters  _inserted! Center of the Line connecting center of the smaller circle and the! intersection of the line connecting TangentPoint's center and the center of the bigger circledict centerCF  centerCF.point.x = (smaller_circle.center.x + _inserted.point.x) / 2  centerCF.point.y = (smaller_circle.center.y + _inserted.point.y) / 2! Get the direction vector of the Line connecting the center of the bigger circle! and the helper circledict _pointFrom, _pointTo, _direction, _directionCF  _pointFrom.x = bigger_circle.center.x  _pointFrom.y = bigger_circle.center.y  _pointFrom.z = 0  _pointTo.x = tpt.center.x  _pointTo.y = tpt.center.y  _pointTo.z = 0call "BasicGeometry" \	parameters 	iFunction = BasicGeometry.DIRECTION_POINTS_3D,        		PointFrom = _pointFrom,                PointTo = _pointTo,	returned_parameters  _direction! direction of the CF line_pointFrom.x = smaller_circle.center.x_pointFrom.y = smaller_circle.center.y_pointTo.x = _inserted.point.x_pointTo.y = _inserted.point.ycall "BasicGeometry" \	parameters 	iFunction = BasicGeometry.DIRECTION_POINTS_3D,        		PointFrom = _pointFrom,                PointTo = _pointTo,	returned_parameters  _directionCF! Get the Center Point of the final tangent circledict _lineA, _lineB, _intersection  ! _lineA => line from the center of the bigger circle  _lineA.point = bigger_circle.center  _lineA.direction = _direction  ! _lineB => perpendicular line from the center the CF line  _lineB.point = centerCF.point  _lineB.direction.ux = -_directionCF.uy  _lineB.direction.uy = _directionCF.uxcall "BasicGeometry" \	parameters	iFunction = BasicGeometry.INTERSECT_LINE_LINE_2D,				lineA = _lineA,				lineB = _lineB,	returned_parameters  _intersection 	! intersection of the lines! And we've got the resulting tangent circledict tangentC  tangentC.center = _intersection.points[1]_dist_t_sc = sqr( (tangentC.center.x - smaller_circle.center.x)^2 +\  					(tangentC.center.y - smaller_circle.center.y)^2)! Check how we need to calculate the Radius_dist_t_bc = sqr( (tangentC.center.x - bigger_circle.center.x)^2 +\  					(tangentC.center.y - bigger_circle.center.y)^2)_dist_t_tpt = sqr( (tangentC.center.x - tpt.center.x)^2 +\  					(tangentC.center.y - tpt.center.y)^2)if _dist_t_bc > _dist_t_tpt then	tangentC.radius = _dist_t_sc - smaller_circle.radiuselse	! the tangent point is of the other side of the circle which means	! we need to add instead of subtract	tangentC.radius = _dist_t_sc + smaller_circle.radiusendif